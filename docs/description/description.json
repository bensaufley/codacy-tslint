[
  {
    "patternId": "adjacent-overload-signatures",
    "title": "adjacent-overload-signatures",
    "description": "Enforces function overloads to be consecutive."
  },
  {
    "patternId": "align",
    "title": "align",
    "description": "Enforces vertical alignment."
  },
  {
    "patternId": "array-type",
    "title": "array-type",
    "description": "Requires using either ‘T[]’ or ‘Array' for arrays."
  },
  {
    "patternId": "arrow-parens",
    "title": "arrow-parens",
    "description": "Requires parentheses around the parameters of arrow function definitions."
  },
  {
    "patternId": "arrow-return-shorthand",
    "title": "arrow-return-shorthand",
    "description": "Suggests to convert () => { return x; } to () => x."
  },
  {
    "patternId": "await-promise",
    "title": "await-promise",
    "description": "Warns for an awaited value that is not a Promise."
  },
  {
    "patternId": "ban",
    "title": "ban",
    "description": "Bans the use of specific functions or global methods."
  },
  {
    "patternId": "ban-comma-operator",
    "title": "ban-comma-operator",
    "description": "Disallows the comma operator to be used."
  },
  {
    "patternId": "ban-types",
    "title": "ban-types",
    "description": "Bans specific types from being used. Does not ban the corresponding runtime objects from being used."
  },
  {
    "patternId": "binary-expression-operand-order",
    "title": "binary-expression-operand-order",
    "description": "In a binary expression, a literal should always be on the right-hand side if possible."
  },
  {
    "patternId": "callable-types",
    "title": "callable-types",
    "description": "An interface or literal type with just a call signature can be written as a function type."
  },
  {
    "patternId": "class-name",
    "title": "class-name",
    "description": "Enforces PascalCased class and interface names."
  },
  {
    "patternId": "comment-format",
    "title": "comment-format",
    "description": "Enforces formatting rules for single-line comments."
  },
  {
    "patternId": "completed-docs",
    "title": "completed-docs",
    "description": "Enforces JSDoc comments for important items be filled out."
  },
  {
    "patternId": "curly",
    "title": "curly",
    "description": "Enforces braces for if/for/do/while statements."
  },
  {
    "patternId": "cyclomatic-complexity",
    "title": "cyclomatic-complexity",
    "description": "Enforces a threshold of cyclomatic complexity."
  },
  {
    "patternId": "deprecation",
    "title": "deprecation",
    "description": "Warns when deprecated APIs are used."
  },
  {
    "patternId": "encoding",
    "title": "encoding",
    "description": "Enforces UTF-8 file encoding."
  },
  {
    "patternId": "eofline",
    "title": "eofline",
    "description": "Ensures the file ends with a newline."
  },
  {
    "patternId": "file-header",
    "title": "file-header",
    "description": "Enforces a certain header comment for all files, matched by a regular expression."
  },
  {
    "patternId": "file-name-casing",
    "title": "file-name-casing",
    "description": "Enforces a consistent file naming convention"
  },
  {
    "patternId": "forin",
    "title": "forin",
    "description": "Requires a for ... in statement to be filtered with an if statement."
  },
  {
    "patternId": "import-blacklist",
    "title": "import-blacklist",
    "description": "Disallows importing the specified modules directly via import and require. Instead only sub modules may be imported from that module."
  },
  {
    "patternId": "import-spacing",
    "title": "import-spacing",
    "description": "Ensures proper spacing between import statement keywords"
  },
  {
    "patternId": "indent",
    "title": "indent",
    "description": "Enforces indentation with tabs or spaces."
  },
  {
    "patternId": "interface-name",
    "title": "interface-name",
    "description": "Requires interface names to begin with a capital ‘I’"
  },
  {
    "patternId": "interface-over-type-literal",
    "title": "interface-over-type-literal",
    "description": "Prefer an interface declaration over a type literal (type T = { ... })"
  },
  {
    "patternId": "jsdoc-format",
    "title": "jsdoc-format",
    "description": "Enforces basic format rules for JSDoc comments."
  },
  {
    "patternId": "label-position",
    "title": "label-position",
    "description": "Only allows labels in sensible locations."
  },
  {
    "patternId": "linebreak-style",
    "title": "linebreak-style",
    "description": "Enforces a consistent linebreak style."
  },
  {
    "patternId": "match-default-export-name",
    "title": "match-default-export-name",
    "description": "Requires that a default import have the same name as the declaration it imports. Does nothing for anonymous default exports."
  },
  {
    "patternId": "max-classes-per-file",
    "title": "max-classes-per-file",
    "description": "A file may not contain more than the specified number of classes"
  },
  {
    "patternId": "max-file-line-count",
    "title": "max-file-line-count",
    "description": "Requires files to remain under a certain number of lines"
  },
  {
    "patternId": "max-line-length",
    "title": "max-line-length",
    "description": "Requires lines to be under a certain max length."
  },
  {
    "patternId": "member-access",
    "title": "member-access",
    "description": "Requires explicit visibility declarations for class members."
  },
  {
    "patternId": "member-ordering",
    "title": "member-ordering",
    "description": "Enforces member ordering."
  },
  {
    "patternId": "new-parens",
    "title": "new-parens",
    "description": "Requires parentheses when invoking a constructor via the new keyword."
  },
  {
    "patternId": "newline-before-return",
    "title": "newline-before-return",
    "description": "Enforces blank line before return when not the only line in the block."
  },
  {
    "patternId": "newline-per-chained-call",
    "title": "newline-per-chained-call",
    "description": "Requires that chained method calls be broken apart onto separate lines."
  },
  {
    "patternId": "no-angle-bracket-type-assertion",
    "title": "no-angle-bracket-type-assertion",
    "description": "Requires the use of as Type for type assertions instead of <Type>."
  },
  {
    "patternId": "no-any",
    "title": "no-any",
    "description": "Disallows usages of any as a type declaration."
  },
  {
    "patternId": "no-arg",
    "title": "no-arg",
    "description": "Disallows use of arguments.callee."
  },
  {
    "patternId": "no-bitwise",
    "title": "no-bitwise",
    "description": "Disallows bitwise operators."
  },
  {
    "patternId": "no-boolean-literal-compare",
    "title": "no-boolean-literal-compare",
    "description": "Warns on comparison to a boolean literal, as in x === true."
  },
  {
    "patternId": "no-conditional-assignment",
    "title": "no-conditional-assignment",
    "description": "Disallows any type of assignment in conditionals."
  },
  {
    "patternId": "no-consecutive-blank-lines",
    "title": "no-consecutive-blank-lines",
    "description": "Disallows one or more blank lines in a row."
  },
  {
    "patternId": "no-console",
    "title": "no-console",
    "description": "Bans the use of specified console methods."
  },
  {
    "patternId": "no-construct",
    "title": "no-construct",
    "description": "Disallows access to the constructors of String, Number, and Boolean."
  },
  {
    "patternId": "no-debugger",
    "title": "no-debugger",
    "description": "Disallows debugger statements."
  },
  {
    "patternId": "no-default-export",
    "title": "no-default-export",
    "description": "Disallows default exports in ES6-style modules."
  },
  {
    "patternId": "no-duplicate-imports",
    "title": "no-duplicate-imports",
    "description": "Disallows multiple import statements from the same module."
  },
  {
    "patternId": "no-duplicate-super",
    "title": "no-duplicate-super",
    "description": "Warns if ‘super()’ appears twice in a constructor."
  },
  {
    "patternId": "no-duplicate-switch-case",
    "title": "no-duplicate-switch-case",
    "description": "Prevents duplicate cases in switch statements."
  },
  {
    "patternId": "no-duplicate-variable",
    "title": "no-duplicate-variable",
    "description": "Disallows duplicate variable declarations in the same block scope."
  },
  {
    "patternId": "no-dynamic-delete",
    "title": "no-dynamic-delete",
    "description": "Bans usage of the delete operator with computed key expressions."
  },
  {
    "patternId": "no-empty",
    "title": "no-empty",
    "description": "Disallows empty blocks."
  },
  {
    "patternId": "no-empty-interface",
    "title": "no-empty-interface",
    "description": "Forbids empty interfaces."
  },
  {
    "patternId": "no-eval",
    "title": "no-eval",
    "description": "Disallows eval function invocations."
  },
  {
    "patternId": "no-floating-promises",
    "title": "no-floating-promises",
    "description": "Promises returned by functions must be handled appropriately."
  },
  {
    "patternId": "no-for-in-array",
    "title": "no-for-in-array",
    "description": "Disallows iterating over an array with a for-in loop."
  },
  {
    "patternId": "no-implicit-dependencies",
    "title": "no-implicit-dependencies",
    "description": "Disallows importing modules that are not listed as dependency in the project’s package.json"
  },
  {
    "patternId": "no-import-side-effect",
    "title": "no-import-side-effect",
    "description": "Avoid import statements with side-effect."
  },
  {
    "patternId": "no-inferrable-types",
    "title": "no-inferrable-types",
    "description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean."
  },
  {
    "patternId": "no-inferred-empty-object-type",
    "title": "no-inferred-empty-object-type",
    "description": "Disallow type inference of {} (empty object type) at function and constructor call sites"
  },
  {
    "patternId": "no-internal-module",
    "title": "no-internal-module",
    "description": "Disallows internal module"
  },
  {
    "patternId": "no-invalid-template-strings",
    "title": "no-invalid-template-strings",
    "description": "Warns on use of ${ in non-template strings."
  },
  {
    "patternId": "no-invalid-this",
    "title": "no-invalid-this",
    "description": "Disallows using the this keyword outside of classes."
  },
  {
    "patternId": "no-irregular-whitespace",
    "title": "no-irregular-whitespace",
    "description": "Disallow irregular whitespace within a file, including strings and comments."
  },
  {
    "patternId": "no-magic-numbers",
    "title": "no-magic-numbers",
    "description": "Disallows the use constant number values outside of variable assignments. When no list of allowed values is specified, -1, 0 and 1 are allowed by default."
  },
  {
    "patternId": "no-mergeable-namespace",
    "title": "no-mergeable-namespace",
    "description": "Disallows mergeable namespaces in the same file."
  },
  {
    "patternId": "no-misused-new",
    "title": "no-misused-new",
    "description": "Warns on apparent attempts to define constructors for interfaces or new for classes."
  },
  {
    "patternId": "no-namespace",
    "title": "no-namespace",
    "description": "Disallows use of internal modules and namespaces."
  },
  {
    "patternId": "no-non-null-assertion",
    "title": "no-non-null-assertion",
    "description": "Disallows non-null assertions using the ! postfix operator."
  },
  {
    "patternId": "no-null-keyword",
    "title": "no-null-keyword",
    "description": "Disallows use of the null keyword literal."
  },
  {
    "patternId": "no-object-literal-type-assertion",
    "title": "no-object-literal-type-assertion",
    "description": "Forbids an object literal to appear in a type assertion expression. Casting to any is still allowed."
  },
  {
    "patternId": "no-parameter-properties",
    "title": "no-parameter-properties",
    "description": "Disallows parameter properties in class constructors."
  },
  {
    "patternId": "no-parameter-reassignment",
    "title": "no-parameter-reassignment",
    "description": "Disallows reassigning parameters."
  },
  {
    "patternId": "no-redundant-jsdoc",
    "title": "no-redundant-jsdoc",
    "description": "Forbids JSDoc which duplicates TypeScript functionality."
  },
  {
    "patternId": "no-reference",
    "title": "no-reference",
    "description": "Disallows /// <reference path=> imports (use ES6-style imports instead)."
  },
  {
    "patternId": "no-reference-import",
    "title": "no-reference-import",
    "description": "Don’t <reference types=\"foo\" /> if you import foo anyway."
  },
  {
    "patternId": "no-require-imports",
    "title": "no-require-imports",
    "description": "Disallows invocation of require()."
  },
  {
    "patternId": "no-return-await",
    "title": "no-return-await",
    "description": "Disallows unnecessary return await."
  },
  {
    "patternId": "no-shadowed-variable",
    "title": "no-shadowed-variable",
    "description": "Disallows shadowing variable declarations."
  },
  {
    "patternId": "no-sparse-arrays",
    "title": "no-sparse-arrays",
    "description": "Forbids array literals to contain missing elements."
  },
  {
    "patternId": "no-string-literal",
    "title": "no-string-literal",
    "description": "Forbids unnecessary string literal property access."
  },
  {
    "patternId": "no-string-throw",
    "title": "no-string-throw",
    "description": "Flags throwing plain strings or concatenations of strings."
  },
  {
    "patternId": "no-submodule-imports",
    "title": "no-submodule-imports",
    "description": "Disallows importing any submodule."
  },
  {
    "patternId": "no-switch-case-fall-through",
    "title": "no-switch-case-fall-through",
    "description": "Disallows falling through case statements."
  },
  {
    "patternId": "no-this-assignment",
    "title": "no-this-assignment",
    "description": "Disallows unnecessary references to this."
  },
  {
    "patternId": "no-trailing-whitespace",
    "title": "no-trailing-whitespace",
    "description": "Disallows trailing whitespace at the end of a line."
  },
  {
    "patternId": "no-unbound-method",
    "title": "no-unbound-method",
    "description": "Warns when a method is used outside of a method call."
  },
  {
    "patternId": "no-unnecessary-callback-wrapper",
    "title": "no-unnecessary-callback-wrapper",
    "description": "Replaces x => f(x) with just f. To catch more cases, enable only-arrow-functions and arrow-return-shorthand too."
  },
  {
    "patternId": "no-unnecessary-class",
    "title": "no-unnecessary-class",
    "description": "Disallows classes that are not strictly necessary."
  },
  {
    "patternId": "no-unnecessary-initializer",
    "title": "no-unnecessary-initializer",
    "description": "Forbids a ‘var’/’let’ statement or destructuring initializer to be initialized to ‘undefined’."
  },
  {
    "patternId": "no-unnecessary-qualifier",
    "title": "no-unnecessary-qualifier",
    "description": "Warns when a namespace qualifier (A.x) is unnecessary."
  },
  {
    "patternId": "no-unnecessary-type-assertion",
    "title": "no-unnecessary-type-assertion",
    "description": "Warns if a type assertion does not change the type of an expression."
  },
  {
    "patternId": "no-unsafe-any",
    "title": "no-unsafe-any",
    "description": "Warns when using an expression of type ‘any’ in a dynamic way. Uses are only allowed if they would work for {} | null | undefined. Type casts and tests are allowed. Expressions that work on all values (such as \"\" + x) are allowed."
  },
  {
    "patternId": "no-unsafe-finally",
    "title": "no-unsafe-finally",
    "description": "Disallows control flow statements, such as return, continue, break and throws in finally blocks."
  },
  {
    "patternId": "no-unused-expression",
    "title": "no-unused-expression",
    "description": "Disallows unused expression statements."
  },
  {
    "patternId": "no-unused-variable",
    "title": "no-unused-variable",
    "description": "Disallows unused imports, variables, functions and private class members. Similar to tsc’s –noUnusedParameters and –noUnusedLocals options, but does not interrupt code compilation."
  },
  {
    "patternId": "no-use-before-declare",
    "title": "no-use-before-declare",
    "description": "Disallows usage of variables before their declaration."
  },
  {
    "patternId": "no-var-keyword",
    "title": "no-var-keyword",
    "description": "Disallows usage of the var keyword."
  },
  {
    "patternId": "no-var-requires",
    "title": "no-var-requires",
    "description": "Disallows the use of require statements except in import statements."
  },
  {
    "patternId": "no-void-expression",
    "title": "no-void-expression",
    "description": "Requires expressions of type void to appear in statement position."
  },
  {
    "patternId": "number-literal-format",
    "title": "number-literal-format",
    "description": "Checks that decimal literals should begin with ‘0.’ instead of just ‘.’, and should not end with a trailing ‘0’."
  },
  {
    "patternId": "object-literal-key-quotes",
    "title": "object-literal-key-quotes",
    "description": "Enforces consistent object literal property quote style."
  },
  {
    "patternId": "object-literal-shorthand",
    "title": "object-literal-shorthand",
    "description": "Enforces/disallows use of ES6 object literal shorthand."
  },
  {
    "patternId": "object-literal-sort-keys",
    "title": "object-literal-sort-keys",
    "description": "Checks ordering of keys in object literals. When using the default alphabetical ordering, additional blank lines may be used to group object properties together while keeping the elements within each group in alphabetical order."
  },
  {
    "patternId": "one-line",
    "title": "one-line",
    "description": "Requires the specified tokens to be on the same line as the expression preceding them."
  },
  {
    "patternId": "one-variable-per-declaration",
    "title": "one-variable-per-declaration",
    "description": "Disallows multiple variable definitions in the same declaration statement."
  },
  {
    "patternId": "only-arrow-functions",
    "title": "only-arrow-functions",
    "description": "Disallows traditional (non-arrow) function expressions."
  },
  {
    "patternId": "ordered-imports",
    "title": "ordered-imports",
    "description": "Requires that import statements be alphabetized and grouped."
  },
  {
    "patternId": "prefer-conditional-expression",
    "title": "prefer-conditional-expression",
    "description": "Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement."
  },
  {
    "patternId": "prefer-const",
    "title": "prefer-const",
    "description": "Requires that variable declarations use const instead of let and var if possible."
  },
  {
    "patternId": "prefer-for-of",
    "title": "prefer-for-of",
    "description": "Recommends a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated."
  },
  {
    "patternId": "prefer-function-over-method",
    "title": "prefer-function-over-method",
    "description": "Warns for class methods that do not use ‘this’."
  },
  {
    "patternId": "prefer-method-signature",
    "title": "prefer-method-signature",
    "description": "Prefer foo(): void over foo: () => void in interfaces and types."
  },
  {
    "patternId": "prefer-object-spread",
    "title": "prefer-object-spread",
    "description": "Enforces the use of the ES2015 object spread operator over Object.assign() where appropriate."
  },
  {
    "patternId": "prefer-readonly",
    "title": "prefer-readonly",
    "description": "Requires that private variables are marked as readonly if they’re never modified outside of the constructor."
  },
  {
    "patternId": "prefer-switch",
    "title": "prefer-switch",
    "description": "Prefer a switch statement to an if statement with simple === comparisons."
  },
  {
    "patternId": "prefer-template",
    "title": "prefer-template",
    "description": "Prefer a template expression over string literal concatenation."
  },
  {
    "patternId": "prefer-while",
    "title": "prefer-while",
    "description": "Prefer while loops instead of for loops without an initializer and incrementor."
  },
  {
    "patternId": "promise-function-async",
    "title": "promise-function-async",
    "description": "Requires any function or method that returns a promise to be marked async."
  },
  {
    "patternId": "quotemark",
    "title": "quotemark",
    "description": "Requires single or double quotes for string literals."
  },
  {
    "patternId": "radix",
    "title": "radix",
    "description": "Requires the radix parameter to be specified when calling parseInt."
  },
  {
    "patternId": "restrict-plus-operands",
    "title": "restrict-plus-operands",
    "description": "When adding two variables, operands must both be of type number or of type string."
  },
  {
    "patternId": "return-undefined",
    "title": "return-undefined",
    "description": "Prefer return; in void functions and return undefined; in value-returning functions."
  },
  {
    "patternId": "semicolon",
    "title": "semicolon",
    "description": "Enforces consistent semicolon usage at the end of every statement."
  },
  {
    "patternId": "space-before-function-paren",
    "title": "space-before-function-paren",
    "description": "Require or disallow a space before function parenthesis"
  },
  {
    "patternId": "space-within-parens",
    "title": "space-within-parens",
    "description": "Enforces spaces within parentheses or disallow them.  Empty parentheses () are always allowed."
  },
  {
    "patternId": "strict-boolean-expressions",
    "title": "strict-boolean-expressions",
    "description": "Restricts the types allowed in boolean expressions. By default only booleans are allowed. The following nodes are checked: Arguments to the !, &&, and || operators The condition in a conditional expression (cond ? x : y) Conditions for if, for, while, and do-while statements."
  },
  {
    "patternId": "strict-type-predicates",
    "title": "strict-type-predicates",
    "description": "Warns for type predicates that are always true or always false. Works for ‘typeof’ comparisons to constants (e.g. ‘typeof foo === “string”’), and equality comparison to ‘null’/’undefined’. (TypeScript won’t let you compare ‘1 === 2’, but it has an exception for ‘1 === undefined’.) Does not yet work for ‘instanceof’. Does not warn for ‘if (x.y)’ where ‘x.y’ is always truthy. For that, see strict-boolean-expressions. This rule requires strictNullChecks to work properly."
  },
  {
    "patternId": "switch-default",
    "title": "switch-default",
    "description": "Require a default case in all switch statements."
  },
  {
    "patternId": "switch-final-break",
    "title": "switch-final-break",
    "description": "Checks whether the final clause of a switch statement ends in break;."
  },
  {
    "patternId": "trailing-comma",
    "title": "trailing-comma",
    "description": "Requires or disallows trailing commas in array and object literals, destructuring assignments, function typings, named imports and exports and function parameters."
  },
  {
    "patternId": "triple-equals",
    "title": "triple-equals",
    "description": "Requires === and !== in place of == and !=."
  },
  {
    "patternId": "type-literal-delimiter",
    "title": "type-literal-delimiter",
    "description": "Checks that type literal members are separated by semicolons. Enforces a trailing semicolon for multiline type literals."
  },
  {
    "patternId": "typedef",
    "title": "typedef",
    "description": "Requires type definitions to exist."
  },
  {
    "patternId": "typedef-whitespace",
    "title": "typedef-whitespace",
    "description": "Requires or disallows whitespace for type definitions."
  },
  {
    "patternId": "typeof-compare",
    "title": "typeof-compare",
    "description": "Makes sure result of typeof is compared to correct string values"
  },
  {
    "patternId": "unified-signatures",
    "title": "unified-signatures",
    "description": "Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter."
  },
  {
    "patternId": "use-default-type-parameter",
    "title": "use-default-type-parameter",
    "description": "Warns if an explicitly specified type argument is the default for that type parameter."
  },
  {
    "patternId": "use-isnan",
    "title": "use-isnan",
    "description": "Enforces use of the isNaN() function to check for NaN references instead of a comparison to the NaN constant."
  },
  {
    "patternId": "variable-name",
    "title": "variable-name",
    "description": "Checks variable names for various errors."
  },
  {
    "patternId": "whitespace",
    "title": "whitespace",
    "description": "Enforces whitespace style conventions."
  },
  {
    "patternId": "chai-prefer-contains-to-index-of",
    "title": "chai-prefer-contains-to-index-of",
    "description": "Avoid Chai assertions that invoke indexOf and compare for a -1 result. It is better to use the chai .contain() assertion API instead because the failure message will be clearer if the test fails."
  },
  {
    "patternId": "chai-vague-errors",
    "title": "chai-vague-errors",
    "description": "Avoid Chai assertions that result in vague errors."
  },
  {
    "patternId": "export-name",
    "title": "export-name",
    "description": "The name of the exported module must match the filename of the source file. This is case-insensitive by default but ignores file extension. It can be configured to be case-insensitive or to allow names matching a regex."
  },
  {
    "patternId": "function-name",
    "title": "function-name",
    "description": "Applies a naming convention to function names and method names. You can configure the naming convention by passing parameters. Please note, the private-method-regex does take precedence over the static-method-regex, so a private static method must match the private-method-regex."
  },
  {
    "patternId": "import-name",
    "title": "import-name",
    "description": "The name of the imported module must match the name of the thing being imported."
  },
  {
    "patternId": "insecure-random",
    "title": "insecure-random",
    "description": "Do not use insecure sources for random bytes. Use a secure random number generator instead. Bans all uses of Math.random and crypto.pseudoRandomBytes."
  },
  {
    "patternId": "jquery-deferred-must-complete",
    "title": "jquery-deferred-must-complete",
    "description": "When a JQuery Deferred instance is created, then either reject() or resolve() must be called on it within all code branches in the scope. For more examples see the feature request."
  },
  {
    "patternId": "max-func-body-length",
    "title": "max-func-body-length",
    "description": "Avoid long functions. The line count of a function body must not exceed the value configured within this rule's options."
  },
  {
    "patternId": "missing-jsdoc",
    "title": "missing-jsdoc",
    "description": "All files must have a top level JSDoc comment. A JSDoc comment starts with /** (not one more or one less asterisk) and a JSDoc at the 'top-level' appears without leading spaces. Trailing spaces are acceptable but not recommended."
  },
  {
    "patternId": "missing-optional-annotation",
    "title": "missing-optional-annotation",
    "description": "Deprecated - This rule is now enforced by the TypeScript compiler. A parameter that follows one or more parameters marked as optional is not itself marked optional"
  },
  {
    "patternId": "mocha-avoid-only",
    "title": "mocha-avoid-only",
    "description": "Do not invoke Mocha's describe.only, it.only or context.only functions. These functions are useful ways to run a single unit test or a single test case during your build, but please be careful to not push these methods calls to your version control repository because it will turn off any of the other tests."
  },
  {
    "patternId": "mocha-no-side-effect-code",
    "title": "mocha-no-side-effect-code",
    "description": "All test logic in a Mocha test case should be within Mocha lifecycle method and not defined statically to execute when the module loads."
  },
  {
    "patternId": "mocha-unneeded-done",
    "title": "mocha-unneeded-done",
    "description": "A function declares a MochaDone parameter but only resolves it synchronously in the main function. The MochaDone parameter can be safely removed from the parameter list."
  },
  {
    "patternId": "no-backbone-get-set-outside-model",
    "title": "no-backbone-get-set-outside-model",
    "description": "Avoid using model.get('x') and model.set('x', value) Backbone accessors outside of the owning model. This breaks type safety and you should define getters and setters for your attributes instead."
  },
  {
    "patternId": "no-banned-terms",
    "title": "no-banned-terms",
    "description": "Do not use banned terms: caller, callee, eval, arguments. These terms refer to functions or properties that should not be used, so it is best practice to simply avoid them."
  },
  {
    "patternId": "no-constant-condition",
    "title": "no-constant-condition",
    "description": "Do not use constant expressions in conditions. Similar to the ESLint no-constant-condition rule. Since version 2.0.14, this rule accepts a parameter called checkLoops which defaults to true. If set to false then loops are not checked for conditionals."
  },
  {
    "patternId": "no-control-regex",
    "title": "no-control-regex",
    "description": "Do not use control characters in regular expressions . Similar to the ESLint no-control-regex rule"
  },
  {
    "patternId": "no-cookies",
    "title": "no-cookies",
    "description": "Do not use cookies"
  },
  {
    "patternId": "no-delete-expression",
    "title": "no-delete-expression",
    "description": "Do not delete expressions. Only properties should be deleted"
  },
  {
    "patternId": "no-disable-auto-sanitization",
    "title": "no-disable-auto-sanitization",
    "description": "Do not disable auto-sanitization of HTML because this opens up your page to an XSS attack. Specifically, do not use the execUnsafeLocalFunction or setInnerHTMLUnsafe functions."
  },
  {
    "patternId": "no-document-domain",
    "title": "no-document-domain",
    "description": "Do not write to document.domain. Scripts setting document.domain to any value should be validated to ensure that the value is on a list of allowed sites. Also, if your site deals with PII in any way then document.domain must not be set to a top-level domain (for example, live.com) but only to an appropriate subdomain (for example, billing.live.com)."
  },
  {
    "patternId": "no-document-write",
    "title": "no-document-write",
    "description": "Do not use document.write"
  },
  {
    "patternId": "no-duplicate-case",
    "title": "no-duplicate-case",
    "description": "Deprecated - This rule can be replaced with TSLint's no-duplicate-switch-case. Do not use duplicate case labels in switch statements. Similar to the ESLint no-duplicate-case rule"
  },
  {
    "patternId": "no-duplicate-parameter-names",
    "title": "no-duplicate-parameter-names",
    "description": "Deprecated - This rule is now enforced by the TypeScript compiler. Do not write functions or methods with duplicate parameter names"
  },
  {
    "patternId": "no-empty-interfaces",
    "title": "no-empty-interfaces",
    "description": "Deprecated - This rule can be replaced with TSLint's no-empty-interface. Do not use empty interfaces. They are compile-time only artifacts and they serve no useful purpose"
  },
  {
    "patternId": "no-empty-line-after-opening-brace",
    "title": "no-empty-line-after-opening-brace",
    "description": "Avoid an empty line after an opening brace."
  },
  {
    "patternId": "no-exec-script",
    "title": "no-exec-script",
    "description": "Do not use the execScript functions"
  },
  {
    "patternId": "no-for-in",
    "title": "no-for-in",
    "description": "Avoid use of for-in statements. They can be replaced by Object.keys"
  },
  {
    "patternId": "no-function-constructor-with-string-args",
    "title": "no-function-constructor-with-string-args",
    "description": "Do not use the version of the Function constructor that accepts a string argument to define the body of the function"
  },
  {
    "patternId": "no-function-expression",
    "title": "no-function-expression",
    "description": "Do not use function expressions; use arrow functions (lambdas) instead. In general, lambdas are simpler to use and avoid the confusion about what the 'this' references points to. Function expressions that contain a 'this' reference are allowed and will not create a failure."
  },
  {
    "patternId": "no-http-string",
    "title": "no-http-string",
    "description": "Do not use strings that start with 'http:'. URL strings should start with 'https:'. Http strings can be a security problem and indicator that your software may suffer from cookie-stealing attacks."
  },
  {
    "patternId": "no-increment-decrement",
    "title": "no-increment-decrement",
    "description": "Avoid use of increment and decrement operators particularly as part of complicated expressions"
  },
  {
    "patternId": "no-inner-html",
    "title": "no-inner-html",
    "description": "Do not write values to innerHTML, outerHTML, or set HTML using the JQuery html() function. Writing values to innerHTML can expose your website to XSS injection attacks. All strings must be escaped before being rendered to the page."
  },
  {
    "patternId": "no-invalid-regexp",
    "title": "no-invalid-regexp",
    "description": "Do not use invalid regular expression strings in the RegExp constructor. Similar to the ESLint no-invalid-regexp rule"
  },
  {
    "patternId": "no-jquery-raw-elements",
    "title": "no-jquery-raw-elements",
    "description": "Do not create HTML elements using JQuery and string concatenation. It is error prone and can hide subtle defects. Instead use the JQuery element API."
  },
  {
    "patternId": "no-missing-visibility-modifiers",
    "title": "no-missing-visibility-modifiers",
    "description": "Deprecated - This rule is in the TSLint product as member-access. Class members (both fields and methods) should have visibility modifiers specified. THe Principle of Least Visibility guides us to prefer private methods and fields when possible. If a developer forgets to add a modifier then TypeScript assumes the element should be public, which is the wrong default choice."
  },
  {
    "patternId": "no-multiline-string",
    "title": "no-multiline-string",
    "description": "Do not declare multiline strings"
  },
  {
    "patternId": "no-multiple-var-decl",
    "title": "no-multiple-var-decl",
    "description": "Deprecated - This rule is now part of the base TSLint product as the rule named 'one-variable-per-declaration'. Do not use comma separated variable declarations"
  },
  {
    "patternId": "no-octal-literal",
    "title": "no-octal-literal",
    "description": "Do not use octal literals or escaped octal sequences"
  },
  {
    "patternId": "no-regex-spaces",
    "title": "no-regex-spaces",
    "description": "Do not use multiple spaces in a regular expression literal. Similar to the ESLint no-regex-spaces rule"
  },
  {
    "patternId": "no-relative-imports",
    "title": "no-relative-imports",
    "description": "Do not use relative paths when importing external modules or ES6 import declarations."
  },
  {
    "patternId": "no-reserved-keywords",
    "title": "no-reserved-keywords",
    "description": "Do not use reserved keywords as names of local variables, fields, functions, or other identifiers. Since version 2.0.9 this rule accepts a parameter called allow-quoted-properties. If true, interface properties in quotes will be ignored. This can be a useful way to avoid verbose suppress-warning comments for generated d.ts files. This rule has some overlap with the tslint variable-name rule, however, the rule here finds more keywords and more usages."
  },
  {
    "patternId": "no-single-line-block-comment",
    "title": "no-single-line-block-comment",
    "description": "Avoid single line block comments and use single line comments instead. Block comments do not nest properly and have no advantages over normal single-line comments"
  },
  {
    "patternId": "no-stateless-class",
    "title": "no-stateless-class",
    "description": "Deprecated - This rule can be replaced with TSLint's no-unnecessary-class. A stateless class represents a failure in the object oriented design of the system. A class without state is better modeled as a module or given some state. A stateless class is defined as a class with only static members and no parent class."
  },
  {
    "patternId": "no-string-based-set-immediate",
    "title": "no-string-based-set-immediate",
    "description": "Do not use the version of setImmediate that accepts code as a string argument. However, it is acceptable to use the version of setImmediate where a direct reference to a function is provided as the callback argument"
  },
  {
    "patternId": "no-string-based-set-interval",
    "title": "no-string-based-set-interval",
    "description": "Do not use the version of setInterval that accepts code as a string argument. However, it is acceptable to use the version of setInterval where a direct reference to a function is provided as the callback argument"
  },
  {
    "patternId": "no-string-based-set-timeout",
    "title": "no-string-based-set-timeout",
    "description": "Do not use the version of setTimeout that accepts code as a string argument. However, it is acceptable to use the version of setTimeout where a direct reference to a function is provided as the callback argument"
  },
  {
    "patternId": "no-suspicious-comment",
    "title": "no-suspicious-comment",
    "description": "Do not use suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO. We recommend that you run this rule before each release as a quality checkpoint. Reference: CWE-546 Suspicious Comment"
  },
  {
    "patternId": "no-typeof-undefined",
    "title": "no-typeof-undefined",
    "description": "Do not use the idiom typeof x === 'undefined'. You can safely use the simpler x === undefined or perhaps x == null if you want to check for either null or undefined."
  },
  {
    "patternId": "no-unexternalized-strings",
    "title": "no-unexternalized-strings",
    "description": "Ensures that double quoted strings are passed to a localize call to provide proper strings for different locales. The rule can be configured using an object literal as document in the feature request"
  },
  {
    "patternId": "no-unnecessary-bind",
    "title": "no-unnecessary-bind",
    "description": "Do not bind 'this' as the context for a function literal or lambda expression. If you bind 'this' as the context to a function literal, then you should just use a lambda without the bind. If you bind 'this' as the context to a lambda, then you can remove the bind call because 'this' is already the context for lambdas. Works for Underscore methods as well."
  },
  {
    "patternId": "no-unnecessary-field-initialization",
    "title": "no-unnecessary-field-initialization",
    "description": "Do not unnecessarily initialize the fields of a class to values they already have."
  },
  {
    "patternId": "no-unnecessary-local-variable",
    "title": "no-unnecessary-local-variable",
    "description": "Do not declare a variable only to return it from the function on the next line. It is always less code to simply return the expression that initializes the variable."
  },
  {
    "patternId": "no-unnecessary-override",
    "title": "no-unnecessary-override",
    "description": "Do not write a method that only calls super() on the parent method with the same arguments. You can safely remove methods like this and Javascript will correctly dispatch the method to the parent object."
  },
  {
    "patternId": "no-unnecessary-semicolons",
    "title": "no-unnecessary-semicolons",
    "description": "Remove unnecessary semicolons"
  },
  {
    "patternId": "no-unsupported-browser-code",
    "title": "no-unsupported-browser-code",
    "description": "Avoid writing browser-specific code for unsupported browser versions."
  },
  {
    "patternId": "no-useless-files",
    "title": "no-useless-files",
    "description": "Avoid keeping files around that only contain commented out code, are completely empty, or only contain whitespace characters"
  },
  {
    "patternId": "no-var-self",
    "title": "no-var-self",
    "description": "Deprecated - This rule can be replaced with TSLint's no-this-assignment."
  },
  {
    "patternId": "no-with-statement",
    "title": "no-with-statement",
    "description": "Do not use with statements. Assign the item to a new variable instead"
  },
  {
    "patternId": "non-literal-fs-path",
    "title": "non-literal-fs-path",
    "description": "Detect fs function calls with a non literal filepath. For security reasons, it is best to only pass string literals as filesystem paths. Otherwise, it is perhaps possible for an attacker to read and write arbitrary files on your system through path traversal attacks."
  },
  {
    "patternId": "non-literal-require",
    "title": "non-literal-require",
    "description": "Detect require() function calls for something that is not a string literal. For security reasons, it is best to only require() string literals. Otherwise, it is perhaps possible for an attacker to somehow change the value and download arbitrary Javascript into your page."
  },
  {
    "patternId": "possible-timing-attack",
    "title": "possible-timing-attack",
    "description": "Avoid timing attacks by not making direct string comparisons to sensitive data. Do not compare against variables named password, secret, api, apiKey, token, auth, pass, or hash. For more info see Using Node.js Event Loop for Timing Attacks"
  },
  {
    "patternId": "prefer-array-literal",
    "title": "prefer-array-literal",
    "description": "Use array literal syntax when declaring or instantiating array types."
  },
  {
    "patternId": "prefer-type-cast",
    "title": "prefer-type-cast",
    "description": "Prefer the tradition type casts instead of the new 'as-cast' syntax."
  },
  {
    "patternId": "promise-must-complete",
    "title": "promise-must-complete",
    "description": "When a Promise instance is created, then either the reject() or resolve() parameter must be called on it within all code branches in the scope. For more examples see the feature request. This rule has some overlap with the tslint no-floating-promises rule, but they are substantially different."
  },
  {
    "patternId": "react-a11y-anchors",
    "title": "react-a11y-anchors",
    "description": "For accessibility of your website, anchor element link text should be at least 4 characters long."
  },
  {
    "patternId": "react-a11y-aria-unsupported-elements",
    "title": "react-a11y-aria-unsupported-elements",
    "description": "For accessibility of your website, enforce that elements that do not support ARIA roles, states, and properties do not have those attributes."
  },
  {
    "patternId": "react-a11y-event-has-role",
    "title": "react-a11y-event-has-role",
    "description": "For accessibility of your website, Elements with event handlers must have explicit role or implicit role.References:WCAG Rule 94Using the button role"
  },
  {
    "patternId": "react-a11y-image-button-has-alt",
    "title": "react-a11y-image-button-has-alt",
    "description": "For accessibility of your website, enforce that inputs element with type=\"image\" must have non-empty alt attribute."
  },
  {
    "patternId": "react-a11y-img-has-alt",
    "title": "react-a11y-img-has-alt",
    "description": "Enforce that an img element contains the alt attribute or role='presentation' for a decorative image."
  },
  {
    "patternId": "react-a11y-lang",
    "title": "react-a11y-lang",
    "description": "For accessibility of your website, HTML elements must have a lang attribute and the attribute must be a valid language code."
  },
  {
    "patternId": "react-a11y-meta",
    "title": "react-a11y-meta",
    "description": "For accessibility of your website, HTML meta elements must not have http-equiv=\"refresh\"."
  },
  {
    "patternId": "react-a11y-props",
    "title": "react-a11y-props",
    "description": "For accessibility of your website, enforce all aria-* attributes are valid. Elements cannot use an invalid aria-* attribute. This rule will fail if it finds an aria-* attribute that is not listed in WAI-ARIA states and properties."
  },
  {
    "patternId": "react-a11y-proptypes",
    "title": "react-a11y-proptypes",
    "description": "For accessibility of your website, enforce the type of aria state and property values are correct."
  },
  {
    "patternId": "react-a11y-role-has-required-aria-props",
    "title": "react-a11y-role-has-required-aria-props",
    "description": "For accessibility of your website, elements with aria roles must have all required attributes according to the role. References:ARIA Definition of RolesWCAG Rule 90: Required properties and states should be definedWCAG Rule 91: Required properties and states must not be empty"
  },
  {
    "patternId": "react-a11y-role-supports-aria-props",
    "title": "react-a11y-role-supports-aria-props",
    "description": "For accessibility of your website, enforce that elements with explicit or implicit roles defined contain only aria-* properties supported by that role."
  },
  {
    "patternId": "react-a11y-role",
    "title": "react-a11y-role",
    "description": "For accessibility of your website, elements with aria roles must use a valid, non-abstract aria role. A reference to role definitions can be found at WAI-ARIA roles. References:* WCAG Rule 92: Role value must be valid"
  },
  {
    "patternId": "react-a11y-tabindex-no-positive",
    "title": "react-a11y-tabindex-no-positive",
    "description": "For accessibility of your website, enforce tabindex value is not greater than zero. Avoid positive tabindex attribute values to synchronize the flow of the page with keyboard tab order.References:WCAG 2.4.3 - Focus OrderAudit Rules - tabindex-usageAvoid positive integer values for tabIndex"
  },
  {
    "patternId": "react-a11y-titles",
    "title": "react-a11y-titles",
    "description": "For accessibility of your website, HTML title elements must not be empty, must be more than one word, and must not be more than 60 characters long.References:* WCAG 2.0 - Requirement 2.4.2 Page Titled (Level A)* OAA-Accessibility Rule 13: Title element should not be empty* OAA-Accessibility Rule 24: Title content should be concise* OAA-Accessibility Rule 25: Title text must contain more than one word"
  },
  {
    "patternId": "react-anchor-blank-noopener",
    "title": "react-anchor-blank-noopener",
    "description": "For security reasons, anchor tags with target=\"_blank\" should also include rel=\"noopener noreferrer\". In order to restrict the behavior window.opener access, the original page needs to add a rel=\"noopener\" attribute to any link that has target=\"_blank\". However, Firefox does not support that tag, so you should actually use rel=\"noopener noreferrer\" for full coverage. For more info see: The target=\"_blank\" vulnerability by example"
  },
  {
    "patternId": "react-iframe-missing-sandbox",
    "title": "react-iframe-missing-sandbox",
    "description": "React iframes must specify a sandbox attribute."
  },
  {
    "patternId": "react-no-dangerous-html",
    "title": "react-no-dangerous-html",
    "description": "Do not use React's dangerouslySetInnerHTML API. This rule finds usages of the dangerouslySetInnerHTML API (but not any JSX references). For more info see the react-no-dangerous-html Rule wiki page."
  },
  {
    "patternId": "react-this-binding-issue",
    "title": "react-this-binding-issue",
    "description": "Several errors can occur when using React and React.Component subclasses. When using React components you must be careful to correctly bind the 'this' reference on any methods that you pass off to child components as callbacks."
  },
  {
    "patternId": "react-tsx-curly-spacing",
    "title": "react-tsx-curly-spacing",
    "description": "Consistently use spaces around the brace characters of JSX attributes."
  },
  {
    "patternId": "react-unused-props-and-state",
    "title": "react-unused-props-and-state",
    "description": "Remove unneeded properties defined in React Props and State interfaces. Any interface named Props or State is defined as a React interface. All fields in these interfaces must be referenced. This rule can be configured with regexes to match custom Props and State interface names."
  },
  {
    "patternId": "underscore-consistent-invocation",
    "title": "underscore-consistent-invocation",
    "description": "Enforce a consistent usage of the _ functions. By default, invoking underscore functions should begin with wrapping a variable in an underscore instance: _(list).map(...). An alternative is to prefer using the static methods on the _ variable: _.map(list, ...)."
  },
  {
    "patternId": "use-named-parameter",
    "title": "use-named-parameter",
    "description": "Do not reference the arguments object by numerical index; instead, use a named parameter. This rule is similar to JSLint's Use a named parameter rule."
  },
  {
    "patternId": "valid-typeof",
    "title": "valid-typeof",
    "description": "Deprecated - This rule is now enforced by the TypeScript compiler. Ensures that the results of typeof are compared against a valid string. This rule aims to prevent errors from likely typos by ensuring that when the result of a typeof operation is compared against a string, that the string is a valid value. Similar to the valid-typeof ESLint rule."
  },
  {
    "patternId": "no-empty-character-class",
    "title": "no-empty-character-class",
    "description": "disallow the use of empty character classes in regular expressions (recommended)"
  },
  {
    "patternId": "no-ex-assign",
    "title": "no-ex-assign",
    "description": "disallow assigning to the exception in a catch block (recommended)"
  },
  {
    "patternId": "no-extra-boolean-cast",
    "title": "no-extra-boolean-cast",
    "description": "disallow double-negation boolean casts in a boolean context (recommended)"
  },
  {
    "patternId": "no-extra-semi",
    "title": "no-extra-semi",
    "description": "disallow unnecessary semicolons (recommended)"
  },
  {
    "patternId": "no-inner-declarations",
    "title": "no-inner-declarations",
    "description": "disallow function or variable declarations in nested blocks (recommended)"
  },
  {
    "patternId": "ter-no-irregular-whitespace",
    "title": "ter-no-irregular-whitespace",
    "description": "disallow irregular whitespace (recommended)"
  },
  {
    "patternId": "ter-no-sparse-arrays",
    "title": "ter-no-sparse-arrays",
    "description": "disallow sparse arrays (recommended)"
  },
  {
    "patternId": "no-unexpected-multiline",
    "title": "no-unexpected-multiline",
    "description": "Avoid code that looks like two expressions but is actually one"
  },
  {
    "patternId": "valid-jsdoc",
    "title": "valid-jsdoc",
    "description": "enforce valid JSDoc comments"
  },
  {
    "patternId": "no-multi-spaces",
    "title": "no-multi-spaces",
    "description": "disallow use of multiple spaces"
  },
  {
    "patternId": "ter-no-proto",
    "title": "ter-no-proto",
    "description": "disallow the use of __proto__ property"
  },
  {
    "patternId": "ter-no-script-url",
    "title": "ter-no-script-url",
    "description": "disallow use of javascript: urls."
  },
  {
    "patternId": "ter-no-self-compare",
    "title": "ter-no-self-compare",
    "description": "disallow comparisons where both sides are exactly the same"
  },
  {
    "patternId": "handle-callback-err",
    "title": "handle-callback-err",
    "description": "enforce error handling in callbacks"
  },
  {
    "patternId": "array-bracket-spacing",
    "title": "array-bracket-spacing",
    "description": "enforce consistent spacing inside array brackets"
  },
  {
    "patternId": "block-spacing",
    "title": "block-spacing",
    "description": "disallow or enforce spaces inside of single line blocks"
  },
  {
    "patternId": "brace-style",
    "title": "brace-style",
    "description": "enforce one true brace style"
  },
  {
    "patternId": "ter-computed-property-spacing",
    "title": "ter-computed-property-spacing",
    "description": "require or disallow padding inside computed properties"
  },
  {
    "patternId": "ter-func-call-spacing",
    "title": "ter-func-call-spacing",
    "description": "require or disallow spacing between function identifiers and their invocations"
  },
  {
    "patternId": "ter-indent",
    "title": "ter-indent",
    "description": "enforce consistent indentation"
  },
  {
    "patternId": "ter-max-len",
    "title": "ter-max-len",
    "description": "enforce a maximum line length"
  },
  {
    "patternId": "ter-newline-after-var",
    "title": "ter-newline-after-var",
    "description": "require or disallow an empty newline after variable declarations"
  },
  {
    "patternId": "ter-no-mixed-spaces-and-tabs",
    "title": "ter-no-mixed-spaces-and-tabs",
    "description": "disallow mixed spaces and tabs for indentation (recommended)"
  },
  {
    "patternId": "object-curly-spacing",
    "title": "object-curly-spacing",
    "description": "require or disallow padding inside curly braces"
  },
  {
    "patternId": "ter-padded-blocks",
    "title": "ter-padded-blocks",
    "description": "enforce padding within blocks"
  },
  {
    "patternId": "sort-imports",
    "title": "sort-imports",
    "description": "enforce sorting import declarations within module"
  },
  {
    "patternId": "space-in-parens",
    "title": "space-in-parens",
    "description": "require or disallow spaces inside parentheses"
  },
  {
    "patternId": "ter-no-tabs",
    "title": "ter-no-tabs",
    "description": "disallow all tabs"
  },
  {
    "patternId": "ter-arrow-body-style",
    "title": "ter-arrow-body-style",
    "description": "require braces in arrow function body"
  },
  {
    "patternId": "ter-arrow-parens",
    "title": "ter-arrow-parens",
    "description": "require parens in arrow function arguments"
  },
  {
    "patternId": "ter-arrow-spacing",
    "title": "ter-arrow-spacing",
    "description": "require space before/after arrow function's arrow"
  },
  {
    "patternId": "ter-prefer-arrow-callback",
    "title": "ter-prefer-arrow-callback",
    "description": "require arrow functions as callbacks"
  }
]
